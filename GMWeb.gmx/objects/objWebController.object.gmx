<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Init the DLL, load some web content
//gmweb_init("GMWeb.dll", program_directory + "GMWeb.log");
gmweb_start();

//Prepare variables used for tracking mouse events and passing them through to Awesomium
last_mouse_x = -1;
last_mouse_y = -1;
last_mouse_button = -1;

//The default UI file to load locally. This will play a CSS room transition and then display a menu listing the GMWeb demos.
ui_default_file = "uiMainMenu.html";
//Keep track of which room the web controller was initialized from.
ui_init_room = room;

//Configure the game so that GMWeb knows where to access local web files on disc, for both DEBUG and RELEASE.
//NOTE: Before building the game, you'll want to edit the paths at the top of this script.
gmweb_configure_paths();

//Create a DirectX surface for rendering Awesomium to the width/height of the game window
//gmweb_sf_awesomium = gmweb_surface_create(window_get_width(), window_get_height(), FORMAT.A8R8G8B8);
gmweb_sf_awesomium = gmweb_surface_create(room_width, room_height, FORMAT.A8R8G8B8);

/*
//NOTE: This is how to draw directly on the DirectX surface, from within GameMaker (could be useful)
gmweb_surface_set_target(0, gmweb_sf_awesomium);
    draw_sprite(sprDude, 0, 0, 0);
gmweb_surface_reset_target();
*/

//Initialize Awesomium, including support for logging and a debug port
if (!gmweb_awesomium_start(program_directory + "Awesomium.log", 4, 3000)) {
    show_message("GMWeb ERROR: Failed to start Awesomium.");
}

//Prepare the web view within Awesomium, making sure it matches the width/height of the game window
//Returns: A memory address for the Awesomium web view
//webview = gmweb_awesomium_create_webview(window_get_width(), window_get_height());
webview = gmweb_awesomium_create_webview(room_width, room_height);

//Load the web content from inside the game directory. This also works with regular website URLs.
//gmweb_awesomium_load_url(webview, "https://www.google.com");
gmweb_awesomium_load_url(webview, gmweb_file(ui_default_file));

//Used for displaying an FPS counter that has a slight delay in its update (for readability)
fps_delayed = 0;
fps_counter_delay = 5;
alarm_set(0,fps_counter_delay);

//Style the mouse cursor
cursor_sprite = sprMouse;
window_set_cursor(cr_none);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the delayed FPS counter
fps_delayed = fps_real;
alarm_set(0,fps_counter_delay);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Perform a step in Awesomium
gmweb_awesomium_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Send mouse input events to Awesomium

//Send a mouse move event when the mouse position changes
if (mouse_x != last_mouse_x || mouse_y != last_mouse_y) {
    gmweb_awesomium_mouse_move(webview, mouse_x, mouse_y);    
    last_mouse_x = mouse_x;
    last_mouse_y = mouse_y;
}

//Send a mouse down/up event when the last mouse button changes
if (mouse_button != last_mouse_button) {
    if (mouse_button == mb_none) {
        //Mouse up
        gmweb_awesomium_mouse_up(webview, mouse_button);
    }
    else{
        //Mouse down
        gmweb_awesomium_mouse_down(webview, mouse_button);
    }
    
    last_mouse_button = mouse_button;
}

//Simulate mouse scroll wheel up/down events (53 pixels per scroll)
if (mouse_wheel_up()) {
    gmweb_awesomium_mouse_wheel(webview, 53, 0);
}
if (mouse_wheel_down()) {
    gmweb_awesomium_mouse_wheel(webview, -53, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: TODO - Handling repeated input when holding down a keyboard button
//keyboard_lastkey
//keyboard_key
//keyboard_lastchar
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle GMWeb -&gt; GM as async HTTP events
/*
show_message("HTTP Notification Event.\n
  Action: " + string(event_action) + "
  Number: " + string(event_number) + "
  Type: " + string(event_type) + "
  Object: " + string(event_object)
);

show_message("async_load = "+json_encode(async_load));
*/
switch(async_load[? "from"]){
    case "changeRoom":
        //Change to a specified room in the game
        room_to_load = async_load[? "message"];
        if(room != asset_get_index(room_to_load)){
            room_goto(asset_get_index(room_to_load));
            
            room_to_load = "_" + room_to_load;
            if(room != ui_init_room){
                //Prevent a CSS transition if we're going back to the main menu
                var hash_string = "";
                if(room_to_load == "_rmMainMenu"){
                    hash_string = "#no_transition";
                }
                
                //Load the associated web overlay
                gmweb_awesomium_load_url(webview, gmweb_file(string_replace(room_to_load,"_rm","ui")) + ".html" + hash_string);        
            }            
        }
    break;
    case "spawnBall":
    //Spawn a clickable ball that bounces around
        with(objBallSpawner){
            instance_create(x,y,objBallClickable);
        }
    break;
    default:
        //Received an HTTP event that we don't recognize
        show_message("from: " + async_load[? "from"] + ", " + "message: " + async_load[? "message"]);
        
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Free up the DLL
gmweb_free();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the FPS counter
/*
draw_set_font(fntHud);
draw_set_halign(fa_right);
draw_set_color(c_black);
draw_text(room_width - 7, 9, "FPS: " + string(fps_delayed));
draw_set_color(c_white);
draw_text(room_width - 8, 8, "FPS: " + string(fps_delayed));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Draw the Awesomium surface in the game
//gmweb_awesomium_render(webview, gmweb_sf_awesomium, 0,0);
gmweb_awesomium_render(webview, gmweb_sf_awesomium);
gmweb_draw_surface(gmweb_sf_awesomium, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Send the key down event to Awesomium
gmweb_awesomium_key_down(webview, keyboard_key, keyboard_lastchar);
keyboard_lastchar = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="116">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload default URL
gmweb_awesomium_load_url(webview, gmweb_file(ui_default_file));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Load a web URL from the clipboard
gmweb_awesomium_load_url(webview, clipboard_get_text());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GMWeb: Send the key up event to Awesomium
gmweb_awesomium_key_up(webview, keyboard_key, keyboard_string);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
